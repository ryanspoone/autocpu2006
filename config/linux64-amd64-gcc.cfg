################################################################
# SPEC CPU2006 config file for AMD 64-bit using Linux GCC
################################################################
action = validate
output_format = pdf,text,html,config
ext = amd-lnx64-gcc
allow_extension_override = yes
PATHSEP = /
check_md5 = 1
reportable = 1
rate = 1
tune = base
flagsurl1 = $[top]/config/flags/linux-amd64-gcc.xml


hw_avail        = 2014
hw_cpu_name     = AMD
hw_cpu_mhz      = 2400
hw_disk         = SATA Disk
hw_fpu          = None
hw_memory       = 9999
hw_model        = AMD
hw_nchips       = 1
hw_ncores       = 48
hw_ncoresperchip = 48
hw_nthreadspercore = 1
hw_other        = None
hw_pcache       = 78KB Instruction + 32KB Data per core
hw_scache       = 16MB on chip
hw_tcache       = N/A
hw_ocache       = N/A
hw_vendor       = AMD
license_num     = 13
sw_avail        = 2015
sw_base_ptrsize = 32/64-bit
sw_file         = Linux/ext3
sw_os           = Ubuntu
sw_stat         = Multi-user
sw_other        = None
sw_peak_ptrsize = 64-bit
tester          = Unknown
test_sponsor    = Unknown
sw_compiler1 = C: Version <n.n.n> of gcc
sw_compiler2 = C++: Version <n.n.n> of g++
sw_compiler3 = Fortran: Version <n.n.n> of gfortran


notes_plat_000 = 
notes_plat_005 = Cleared file system page cached using:
notes_plat_010 = "echo '1' > /proc/sys/vm/drop_caches"
notes_plat_015 = 
notes_plat_020 = Disabled transparent huge pages using the following command if available: 
notes_plat_025 = "echo 'never' > /sys/kernel/mm/transparent_hugepage/enabled"
notes_plat_030 = 


default:
CC = gcc -std=gnu89 -m64
CXX = g++ -std=c++98 -m64
FC = gfortran -std=legacy -m64
F77 = gfortran -std=legacy -m64
OBJ = .o
makeflags = -j6
%ifndef %{no-numa}
    notes_submit_000 =
    notes_submit_005 = Using 'numactl --localalloc -physcpubind=' command to set the specific CPU IDs
    notes_submit_010 = to be binded.  (For details, please see the config file.)
    notes_submit_015 =

    submit = numactl --localalloc --physcpubind=$SPECCOPYNUM $command
%elif defined(%{no-numa})
    notes_submit_000 =
    notes_submit_005 = Using 'taskset -c' command to set the specific CPU IDs to be used.
    notes_submit_010 =   (For details, please see the config file.)
    notes_submit_015 =

    submit = taskset -c $SPECCOPYNUM "$command"
%elif defined(%{no-taskset})
    notes_submit_000 =
    notes_submit_005 = Not using any command to set the specific CPU IDs to be used.
    notes_submit_010 =   (For details, please see the config file.)
    notes_submit_015 =

    submit = "$command"
%endif


#####################################################################
# Optimization
#####################################################################

# Peak is high opt
default=peak:
OPTIMIZE = -Ofast -funroll-loops -fno-strict-aliasing
PASS1_CFLAGS = $(OPTIMIZE) -fprofile-generate
PASS2_CFLAGS = $(OPTIMIZE) -fprofile-use
PASS1_FFLAGS = $(OPTIMIZE) -fprofile-generate
PASS2_FFLAGS = $(OPTIMIZE) -fprofile-use
PASS1_CXXFLAGS = $(OPTIMIZE) -fprofile-generate
PASS2_CXXFLAGS = $(OPTIMIZE) -fprofile-use
PASS1_LDCFLAGS = $(OPTIMIZE) -fprofile-generate
PASS2_LDCFLAGS = $(OPTIMIZE) -fprofile-use
PASS1_LDCXXFLAGS = $(OPTIMIZE) -fprofile-generate
PASS2_LDCXXFLAGS = $(OPTIMIZE) -fprofile-use
PASS1_LDFFLAGS = $(OPTIMIZE) -fprofile-generate
PASS2_LDFFLAGS = $(OPTIMIZE) -fprofile-use

## Base is low opt
default=base:
OPTIMIZE = -Ofast -funroll-loops -fno-strict-aliasing
PASS1_CFLAGS = $(OPTIMIZE) -fprofile-generate
PASS2_CFLAGS = $(OPTIMIZE) -fprofile-use
PASS1_FFLAGS = $(OPTIMIZE) -fprofile-generate
PASS2_FFLAGS = $(OPTIMIZE) -fprofile-use
PASS1_CXXFLAGS = $(OPTIMIZE) -fprofile-generate
PASS2_CXXFLAGS = $(OPTIMIZE) -fprofile-use
PASS1_LDCFLAGS = $(OPTIMIZE) -fprofile-generate
PASS2_LDCFLAGS = $(OPTIMIZE) -fprofile-use
PASS1_LDCXXFLAGS = $(OPTIMIZE) -fprofile-generate
PASS2_LDCXXFLAGS = $(OPTIMIZE) -fprofile-use
PASS1_LDFFLAGS = $(OPTIMIZE) -fprofile-generate
PASS2_LDFFLAGS = $(OPTIMIZE) -fprofile-use

#####################################################################
# Portability
#####################################################################

default:
PORTABILITY = -DSPEC_CPU_LINUX -DSPEC_CPU_LINUX_X64 -DSPEC_CPU_LP64

416.gamess:
EXTRA_FFLAGS = -ffixed-form -fno-aggressive-loop-optimizations -fno-tree-dominator-opts

436.cactusADM:
EXTRA_FFLAGS = -fno-second-underscore

445.gobmk:
EXTRA_CFLAGS =

447.dealII:
EXTRA_CXXFLAGS = -include cstdlib -include cstring

450.soplex:
EXTRA_CXXFLAGS =  -fno-strict-aliasing

456.hmmer:
EXTRA_CFLAGS = -funsigned-char
EXTRA_LDFLAGS = -lm

464.h264ref:
EXTRA_LIBS = -lm

481.wrf:
FPORTABILITY = -DSPEC_CPU_CASE_FLAG -DSPEC_CPU_LOGICAL_STRICT
CPORTABILITY = -DSPEC_CPU_CASE_FLAG -DSPEC_CPU_LOGICAL_STRICT
EXTRA_FFLAGS = -fno-aggressive-loop-optimizations -frecord-marker=4
EXTRA_CFLAGS = -fno-aggressive-loop-optimizations
#wrf_data_header_size = 8

483.xalancbmk:
CXXPORTABILITY = -include cstdlib -include cstring

################################################################
# SPEC CPU options for GCC on AMD 64-bit
################################################################

################################################################
# Native system CPU
################################################################
default=default=default=native:
COPTIMIZE = -march=native
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# AMD K6 CPU with MMX instruction set support. 
################################################################
default=default=default=k6:
COPTIMIZE = -march=k6
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# Improved versions of AMD K6 CPU with MMX and 3DNow!
# instruction set support. 
################################################################
default=default=default=k6-2:
COPTIMIZE = -march=k6-2
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# Improved versions of AMD K6 CPU with MMX and 3DNow!
# instruction set support. 
################################################################
default=default=default=k6-3:
COPTIMIZE = -march=k6-3
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# AMD Athlon CPU with MMX, 3dNOW!, enhanced 3DNow! and SSE
# prefetch instructions support. 
################################################################
default=default=default=athlon:
COPTIMIZE = -march=athlon
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# AMD Athlon CPU with MMX, 3dNOW!, enhanced 3DNow! and SSE
# prefetch instructions support. 
################################################################
default=default=default=athlon-tbird:
COPTIMIZE = -march=athlon-tbird
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# Improved AMD Athlon CPU with MMX, 3DNow!, enhanced 3DNow! and
# full SSE instruction set support. 
################################################################
default=default=default=athlon-4:
COPTIMIZE = -march=athlon-4
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# Improved AMD Athlon CPU with MMX, 3DNow!, enhanced 3DNow! and
# full SSE instruction set support. 
################################################################
default=default=default=athlon-xp:
COPTIMIZE = -march=athlon-xp
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# Improved AMD Athlon CPU with MMX, 3DNow!, enhanced 3DNow! and
# full SSE instruction set support. 
################################################################
default=default=default=athlon-mp:
COPTIMIZE = -march=athlon-mp
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# Processors based on the AMD K8 core with x86-64 instruction
# set support, including the AMD Opteron, Athlon 64, and Athlon
# 64 FX processors. (This supersets MMX, SSE, SSE2, 3DNow!,
# enhanced 3DNow! and 64-bit instruction set extensions.) 
################################################################
default=default=default=k8:
COPTIMIZE = -march=k8
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# Processors based on the AMD K8 core with x86-64 instruction
# set support, including the AMD Opteron, Athlon 64, and Athlon
# 64 FX processors. (This supersets MMX, SSE, SSE2, 3DNow!,
# enhanced 3DNow! and 64-bit instruction set extensions.) 
################################################################
default=default=default=opteron:
COPTIMIZE = -march=opteron
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# Processors based on the AMD K8 core with x86-64 instruction
# set support, including the AMD Opteron, Athlon 64, and Athlon
# 64 FX processors. (This supersets MMX, SSE, SSE2, 3DNow!,
# enhanced 3DNow! and 64-bit instruction set extensions.) 
################################################################
default=default=default=athlon64:
COPTIMIZE = -march=athlon64
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# Improved versions of AMD K8 cores with SSE3 instruction set
# support. 
################################################################
default=default=default=athlon-fx:
COPTIMIZE = -march=athlon-fx
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# Improved versions of AMD K8 cores with SSE3 instruction set
# support. 
################################################################
default=default=default=k8-sse3:
COPTIMIZE = -march=k8-sse3
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# Improved versions of AMD K8 cores with SSE3 instruction set
# support.
################################################################
default=default=default=opteron-sse3:
COPTIMIZE = -march=opteron-sse3
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# CPUs based on AMD Family 10h cores with x86-64 instruction set
# support. (This supersets MMX, SSE, SSE2, SSE3, SSE4A, 3DNow!,
# enhanced 3DNow!, ABM and 64-bit instruction set extensions.) 
################################################################
default=default=default=amdfam10:
COPTIMIZE = -march=amdfam10
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# CPUs based on AMD Family 10h cores with x86-64 instruction set
# support. (This supersets MMX, SSE, SSE2, SSE3, SSE4A, 3DNow!,
# enhanced 3DNow!, ABM and 64-bit instruction set extensions.) 
################################################################
default=default=default=barcelona:
COPTIMIZE = -march=barcelona
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# CPUs based on AMD Family 15h cores with x86-64 instruction set
# support. (This supersets FMA4, AVX, XOP, LWP, AES, PCL_MUL,
# CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM
# and 64-bit instruction set extensions.) 
################################################################
default=default=default=bdver1:
COPTIMIZE = -march=bdver1
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# AMD Family 15h core based CPUs with x86-64 instruction set
# support. (This supersets BMI, TBM, F16C, FMA, FMA4, AVX, XOP,
# LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3,
# SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions.) 
################################################################
default=default=default=bdver2:
COPTIMIZE = -march=bdver2
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# AMD Family 15h core based CPUs with x86-64 instruction set
# support. (This supersets BMI, TBM, F16C, FMA, FMA4, FSGSBASE,
# AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3,
# SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction
# set extensions.)
################################################################
default=default=default=bdver3:
COPTIMIZE = -march=bdver3
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# AMD Family 15h core based CPUs with x86-64 instruction set
# support. (This supersets BMI, BMI2, TBM, F16C, FMA, FMA4,
# FSGSBASE, AVX, AVX2, XOP, LWP, AES, PCL_MUL, CX16, MOVBE,
# MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and
# 64-bit instruction set extensions.)
################################################################
default=default=default=bdver4:
COPTIMIZE = -march=bdver4
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# AMD Family 17h core based CPUs with x86-64 instruction set
# support. (This supersets BMI, BMI2, F16C, FMA, FSGSBASE,
# AVX, AVX2, ADCX, RDSEED, MWAITX, SHA, CLZERO, AES, PCL_MUL,
# CX16, MOVBE, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1,
# SSE4.2, ABM, XSAVEC, XSAVES, CLFLUSHOPT, POPCNT, and
# 64-bit instruction set extensions.)
################################################################
default=default=default=znver1:
COPTIMIZE = -march=znver1
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# CPUs based on AMD Family 14h cores with x86-64 instruction set
# support. (This supersets MMX, SSE, SSE2, SSE3, SSSE3, SSE4A,
# CX16, ABM and 64-bit instruction set extensions.)
################################################################
default=default=default=btver1:
COPTIMIZE = -march=btver1
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)

################################################################
# CPUs based on AMD Family 16h cores with x86-64 instruction set
# support. This includes MOVBE, F16C, BMI, AVX, PCL_MUL, AES,
# SSE4.2, SSE4.1, CX16, ABM, SSE4A, SSSE3, SSE3, SSE2, SSE, MMX
# and 64-bit instruction set extensions.)
################################################################
default=default=default=btver2:
COPTIMIZE = -march=btver2
CXXOPTIMIZE = $(COPTIMIZE)
FOPTIMIZE = $(COPTIMIZE)
F77OPTIMIZE = $(COPTIMIZE)
